apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8spoddisruptionbudget
  annotations:
    description: >-
      Disallow the following scenarios when deploying PodDisruptionBudgets or resources that implement the replica subresource (e.g. Deployment, ReplicationController, ReplicaSet, StatefulSet):
      1. Deployment of PodDisruptionBudgets with .spec.maxUnavailable == 0
      2. Deployment of PodDisruptionBudgets with .spec.minAvailable == .spec.replicas of the resource with replica subresource
      This will prevent PodDisruptionBudgets from blocking voluntary disruptions such as node draining.

      https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
spec:
  crd:
    spec:
      names:
        kind: K8sPodDisruptionBudget
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spoddisruptionbudget
        
        has_key(x, k) { _ = x[k] }

        violation[{"msg": msg}] {
          input.review.kind.kind == "PodDisruptionBudget"
          pdb := input.review.object
          not valid_pdb_max_unavailable(pdb)
          msg := sprintf(
            "PodDisruptionBudget <%v> has maxUnavailable of 0, only positive integers are allowed for maxUnavailable",
            [pdb.metadata.name],
          )
        }

        violation[{"msg": msg}] {
          obj := input.review.object
          replicas := obj.spec.replicas
          replicas > 0
          pdb := get_pdb(obj)
          pdb_details := valid_pdb(replicas, pdb.spec)
          pdb_setting := pdb_details[pdb_type]
          msg := sprintf(
            "%v `%v` with `%v` replicas has PDB `%v` with `%v` set to `%v` which does not allow pods to be evicted",
            [obj.kind, obj.metadata.name, replicas, pdb.metadata.name, pdb_type, pdb_setting],
          )
        }
        
        get_pdb(obj) = pdb {
          # Scaling requests use a different type so here we need to find the matching deployment before finding the PDB
          obj.kind == "Scale"
          deployment := data.inventory.namespace[obj.metadata.namespace][_].Deployment[_]
          deployment.metadata.name == obj.metadata.name
          pdb := data.inventory.namespace[obj.metadata.namespace][_].PodDisruptionBudget[_]
          deployment.spec.selector.matchLabels == pdb.spec.selector.matchLabels
        }{
          obj.kind != "Scale"
          pdb := data.inventory.namespace[obj.metadata.namespace][_].PodDisruptionBudget[_]
          obj.spec.selector.matchLabels == pdb.spec.selector.matchLabels
        }

        valid_pdb(replicas, pdb) = out {
          has_key(pdb, "minAvailable")
          out = valid_pdb_min_available(replicas, pdb)
        }{
          has_key(pdb, "maxUnavailable")
          out = valid_pdb_max_unavailable(pdb)
        }
        
        valid_pdb_min_available(replicas, pdb) = out {
          # Calculate minAvailable if it's a percentage
          endswith(pdb.minAvailable, "%")
          minAvailable = ceil(to_number(trim_suffix(pdb.minAvailable, "%"))/100 * replicas)
          minAvailable >= replicas
          out = {"minAvailable": pdb.minAvailable}
        }{
          not endswith(pdb.minAvailable, "%")
          pdb.minAvailable >= replicas
          out = {"minAvailable": pdb.minAvailable}
        }
        
        valid_pdb_max_unavailable(pdb) = out {
          # Calculate maxUnavailable if it's a percentage
          endswith(pdb.maxUnavailable, "%")
          maxUnavailable = to_number(trim_suffix(pdb.maxUnavailable, "%"))
          maxUnavailable == 0
          out = {"maxUnavailable": pdb.maxUnavailable}
        }{
         not endswith(pdb.maxUnavailable, "%")
         pdb.maxUnavailable == 0
         out = {"maxUnavailable": pdb.maxUnavailable}
        }
